<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
     3 Jun 2008 16:12:05

     Vanilla Forum
     Build the vanilla package

     requires:
		- JDK 1.5+
		- Ant 1.7

     Damien Lebrun
     ====================================================================== -->
<project name="Vanilla Forum" default="build">
    <description>
            Build the vanilla package
    </description>

	<loadproperties srcfile="build.properties"/>
	<path id="project.classpath">
		<fileset dir="${tools.ant.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="project.classpath"/>

    <!-- =================================
          target: build
         ================================= -->
    <target name="build" depends="prepare" description="--> Build the vanilla package">

    	<!-- binary file could be corrupted if filtered, so we copy them separatly -->
		<echo message="${line.separator}Copy files which do not need any processing..."/>
		<copy todir="${build.app.dir}" verbose="true" encoding="UTF-8" outputencoding="UTF-8">
			<fileset dir="${src.dir}">
				<exclude name="**/*.php"/>
				<exclude name="**/*.html"/>
				<exclude name="${js.dir}*.js"/>
				<exclude name="${js.dir}/test/**"/>
				<exclude name="${css.dir}*.css"/>
				<exclude name="conf/*.php"/>
				<exclude name="extension/**"/>
				<exclude name="**/.svn/**"/>
				<exclude name="**/thumbs.db"/>
				<exclude name="**/.DS_STORE"/>
				<exclude name="**/__MACOSX"/>
			</fileset>
		</copy>

    	<!-- Filter php and html files for the version number -->
		<echo message="${line.separator}Copy php and html files, replacing version number..."/>
		<copy todir="${build.app.dir}" verbose="true"  encoding="UTF-8" outputencoding="UTF-8">
			<fileset dir="${src.dir}">
				<exclude name="${js.dir}/test/**"/>
				<include name="**/*.php"/>
				<include name="**/*.html"/>
				<exclude name="conf/*.php"/>
				<exclude name="extension/**"/>
				<exclude name="**/thumbs.db"/>
			</fileset>
			<filterset begintoken="@@" endtoken="@@">
				<filter token="VANILLA-VERSION" value="${app.version}"/>
				<filter token="FRAMEWORK-VERSION" value="${framework.version}"/>
				<filter token="PEOPLE-VERSION" value="${people.version}"/>
			</filterset>
		</copy>

		<!--	Compress js files with Julien Lecomte's YUI Compressor.
				(copy the source file to js/src/) -->
		<echo message="${line.separator}Compress js files..."/>
		<apply executable="java" parallel="false" addsourcefile="false" verbose="true">
			<fileset dir="${src.js.dir}" includes="*.js"/>
			<arg line="-jar"/>
			<arg path="${tools.compressor.path}"/>
			<arg line="--charset UTF-8 --type js"/>
			<redirector>
				<!--	redirect STDIN; files relative to its dir, but we need them
						relative to basedir -->
				<inputmapper type="glob" from="*" to="${src.js.dir}*"/>
				<!-- redirect STDOUT to file in js build folder -->
				<outputmapper id="out" type="glob" from="*.js" to="${build.js.dir}*.js"/>
			</redirector>
		</apply>

		<mkdir dir="${build.js.dir}src"/>
		<copy todir="${build.js.dir}src">
			<fileset dir="${src.js.dir}">
				<include name="*.js"/>
			</fileset>
		</copy>

		<!--	Compress css files with Julien Lecomte's YUI Compressor
				(copy the original files to themes/vanilla/styles/default/src/) -->
		<echo message="${line.separator}Compress css files..."/>
		<apply executable="java" parallel="false" addsourcefile="false" verbose="true">
			<fileset dir="${src.css.dir}" includes="*.css"/>
			<arg line="-jar"/>
			<arg path="${tools.compressor.path}"/>
			<arg line="--charset UTF-8 --type css"/>
			<redirector>
				<!--	redirect STDIN; files relative to its dir, but we need them
						relative to basedir -->
				<inputmapper type="glob" from="*" to="${src.css.dir}*"/>
				<!--    redirect STDOUT to file in js build folder -->
				<outputmapper id="out" type="glob" from="*.css" to="${build.css.dir}*.css"/>
			</redirector>
		</apply>

		<mkdir dir="${build.css.dir}src"/>
		<copy todir="${build.css.dir}src">
			<fileset dir="${src.css.dir}">
				<include name="*.css"/>
			</fileset>
		</copy>

    	<!-- create md5 signatures
    	<echo>Create MD% file signatures...</echo>
		<exec executable="php" failonerror="true">
    		<arg line="-f"/>
    		<arg path="${tools.md5.path}"/>
    		<arg path="${build.app.dir}"/>
		</exec>-->

    	<!-- Create the zip archive -->
    	<echo>Create archive....</echo>
    	<zip basedir="${build.dir}" destfile="${dist.dir}${dist.name}.zip" excludes="**/js/test, **/js/test/**"/>

    </target>

	<!-- =================================
          target: update
         ================================= -->
    <target name="update" description="--> Update the working copy">
    	<echo>Update working copy...</echo>
    	<svn>
    		<update dir="./"/>
    	</svn>
    </target>


    <!-- - - - - - - - - - - - - - - - - -
          target: clean
         - - - - - - - - - - - - - - - - - -->
    <target name="clean">
    	<echo>Delete content of ${build.dir} and ${dist.dir}...</echo>
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*"/>
			<fileset dir="${dist.dir}" includes="**/*"/>
		</delete>
    </target>

	<!-- - - - - - - - - - - - - - - - - -
          target: getAppDetails
         - - - - - - - - - - - - - - - - - -->
    <target name="getAppDetails">
		<echo>Get application names and versions...</echo>
		<loadproperties srcfile="${src.dir}appg/version.php">
			<filterchain>
				<containsregex pattern="define.*'(.+)_(.+)'.*'([-\w\.]+)'.*" replace="\1.\2 = \3"/>
			</filterchain>
		</loadproperties>
		<property name="app.version"		value="${APPLICATION.VERSION}"/>
		<property name="framework.version"		value="${FRAMEWORK.VERSION}"/>
		<property name="people.version"			value="${PEOPLE.VERSION}"/>
		<echo>Vanilla version ${app.version}</echo>
		<echo>People version ${people.version}</echo>
		<echo>Framework version ${framework.version}</echo>
    </target>

	<!-- - - - - - - - - - - - - - - - - -
          target: prepare
         - - - - - - - - - - - - - - - - - -->
    <target name="prepare" depends="clean,getAppDetails">
    	<property name="dist.name" value="${app.name}-${app.version}"/>
    	<property name="build.app.dir" value="${build.dir}${dist.name}/"/>
    	<property name="build.js.dir" value="${build.app.dir}${js.dir}"/>
    	<property name="build.css.dir" value="${build.app.dir}${css.dir}"/>

		<mkdir dir="${build.app.dir}"/>
    </target>

</project>
